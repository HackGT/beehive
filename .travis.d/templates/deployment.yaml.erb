apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: <%= app['uid'] %>
  labels:
    name: <%= app['uid'] %>
    heritage: Biodomes
spec:
  revisionHistoryLimit: 0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: <%= (app['deployment'] and app['deployment']['replicas']) or 1 %>
  template:
    metadata:
      name: <%= app['uid'] %>
      labels:
        name: <%= app['uid'] %>
    spec:
        initContainer:
          <% if app['wants'] && app['wants']['postgres'] %>
          - image: "hackgt/pg_initialaser:latest"
            name: "init-pg"
            env:
              - name: POSTGRES_URL
                value: postgres://<%= biodome['postgres']['admin_user'] %>@<%= biodome['postgres']['host'] %>/?sslmode=disable
              - name: USERNAME
                value: app['uid']
              - name: DBNAME
                value: app['uid']
          <% end %>
        containers:
          - image: <%= app['git']['user'] %>/<%= app['git']['shortname'] %>:<%= app['docker-tag'] %>
            imagePullPolicy: Always
            resources:
              limits:
                memory: <%= (app['deployment'] and app['deployment']['memory']) or "256Mi" %>
              requests:
                cpu: 10m
                memory: <%= (app['deployment'] and app['deployment']['memory_request']) or "128Mi" %>
            name: <%= app['uid'] %>
            env:
              - name: PORT
                value: !!str <%= app['target_port'] or 3000 %>
              - name: ROOT_URL
                value: <%= "https://#{app['host']}" %>
              <% if app['wants']%>
              <% if app['wants']['mongo'] %>
              - name: <%= app['wants']['mongo']['env'] ? app['wants']['mongo']['env'] : 'MONGO_URL' %>
                value: !!str mongodb://<%= biodome['mongo'] %>/<%= app['uid'] %>
              <% end %>
              <% if app['wants']['postgres'] %>
              - name: <%= app['wants']['postgres']['env'] ? app['wants']['postgres']['env'] : 'POSTGRES_URL' %>
                value: !!str postgres://<%= app['uid'] %>@<%= biodome['postgres']['host'] %>/<%= app['uid'] %>?sslmode=disable
              <% end %>
              <% end %>
              <% app['env']&.each do |name, value| %>
              - name: <%= name %>
              <% if value.is_a? Hash %>
                value: !!str <%= JSON.generate(value).to_s.inspect %>
              <% else %>
                value: !!str <%= value.to_s.inspect %>
              <% end %>
              <% end %>
              <% app['secrets']&.each do |name| %>
              - name: <%= name %>
                valueFrom:
                  secretKeyRef:
                    name: <%= app['secrets-source'] or "#{app['uid']}-secrets" %>
                    key: <%= name %>
              <% end %>
              <% app['files'].each do |root, opts| %>
              <% opts[:contents].each do |_, file_opts| %>
              <% if file_opts[:env] %>
              - name: <%= file_opts[:env] %>
                value: <%= file_opts[:full_path] %>
              <% end %>
              <% end %>
              <% end %>

            <% if app['files'] %>
            volumeMounts:
            <% app['files'].each do |root, opts| %>
              - mountPath: <%= root %>
                name: <%= opts[:key] %>
                <% if opts[:secret] %>
                readOnly: true
                <% end %>
            <% end %>
            <% end %>

            <% unless app['health'].nil? %>
            livenessProbe:
              httpGet:
                path: <%= app['health']['path'] or '/' %>
                port: <%= app['target_port'] or 3000 %>
              initialDelaySeconds: 300
              periodSeconds: 10
            readinessProbe:
              httpGet:
                path: <%= app['health']['path'] or '/' %>
                port: <%= app['target_port'] or 3000 %>
              initialDelaySeconds: 3
              periodSeconds: 10
            <% end %>

            ports:
              - containerPort: <%= app['target_port'] or 3000 %>
                name: node

        <% unless app['files'].empty? %>
        volumes:
          <% app['files'].each do |root, vol_opts| %>
          - name: <%= vol_opts[:key] %>
            <% if vol_opts[:secret] %>
            secret:
                secretName: <%= vol_opts[:key] %>
            <% else %>
            configMap:
              name: <%= vol_opts[:key] %>
              items:
              <% vol_opts[:contents].each do |_, file_opts| %>
              - key: <%= file_opts[:key] %>
                path: <%= file_opts[:path] %>
              <% end %>
            <% end %>
          <% end %>
        <% end %>
